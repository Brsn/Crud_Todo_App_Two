{"version":3,"sources":["components/create-todo.js","components/edit-todo.js","components/todos-list.js","components/delete-todo.js","App.js","serviceWorker.js","index.js"],"names":["TodosList","props","state","todo_name","todo_description","todo_completed","onChangeTodoName","bind","onChangeTodoDescription","onSubmit","e","this","setState","target","value","preventDefault","console","log","newTodo","axios","post","then","res","data","style","marginTop","className","type","onChange","Component","onChangeTodoCompleted","get","match","params","id","response","catch","error","alert","obj","name","checked","htmlFor","Todo","todo","to","_id","todos","refreshPage","map","currentTodo","i","key","todoList","deleteTodo","delete","App","path","exact","component","EditTodo","CreateTodo","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a35c035.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\n\r\nexport default class TodosList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            todo_name: '',\r\n            todo_description: '',\r\n            todo_completed: false\r\n        }\r\n        //bind the methods\r\n        this.onChangeTodoName = this.onChangeTodoName.bind(this);\r\n        this.onChangeTodoDescription = this.onChangeTodoDescription.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    // all of our set state methods\r\n    onChangeTodoName(e) {\r\n        this.setState({\r\n            todo_name: e.target.value\r\n        });\r\n    }\r\n    //for updates the state of name\r\n    onChangeTodoDescription(e) {\r\n        this.setState({\r\n            todo_description: e.target.value\r\n        });\r\n    }\r\n    //form updates the state of description \r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        console.log(`Form submitted:`);\r\n        console.log(`Todo Name: ${this.state.todo_name}`);\r\n        console.log(`Todo Description: ${this.state.todo_description}`);\r\n        console.log(`Todo Completed: ${this.state.todo_completed}`);\r\n\r\n        //stores are todos in an object\r\n        const newTodo = {\r\n            todo_name: this.state.todo_name,\r\n            todo_description: this.state.todo_description,\r\n            todo_completed: this.state.todo_completed\r\n        }\r\n        //we use axios to post with our server\r\n        axios.post(\"http://localhost:5000/todos/add\", newTodo)\r\n            .then(res => console.log(res.data));\r\n        this.setState({\r\n            //here we reset the state after submitting\r\n            todo_name: '',\r\n            todo_description: '',\r\n            todo_completed: false\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{ marginTop: 20 }}>\r\n                <h3>Create New Todo</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Todo Name: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.todo_name}\r\n                            onChange={this.onChangeTodoName}\r\n                        //call the onChange method to save to the state\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Todo Description: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.todo_description}\r\n                            onChange={this.onChangeTodoDescription}\r\n                        //call the onChange method to save to the state\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Create Todo\" className=\"btn btn-success\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport default class TodosList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeTodoName = this.onChangeTodoName.bind(this);\r\n        this.onChangeTodoDescription = this.onChangeTodoDescription.bind(this);\r\n        this.onChangeTodoCompleted = this.onChangeTodoCompleted.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            todo_name: '',\r\n            todo_description: '',\r\n            todo_completed: false\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        axios.get('http://localhost:5000/todos/' + this.props.match.params.id)\r\n            //get request to the backend \"server\" for the todolist\r\n            .then(response => {\r\n                this.setState({\r\n                    //sets updated state properties w\r\n                    todo_name: response.data.todo_name,\r\n                    todo_description: response.data.todo_description,\r\n                    todo_completed: response.data.todo_completed\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error)\r\n            })\r\n    }\r\n    onChangeTodoName(e) {\r\n        this.setState({\r\n            todo_name: e.target.value\r\n        });\r\n    }\r\n    onChangeTodoDescription(e) {\r\n        this.setState({\r\n            todo_description: e.target.value\r\n        });\r\n    }\r\n    onChangeTodoCompleted(e) {\r\n        this.setState({\r\n            todo_completed: !this.state.todo_completed\r\n        })\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        alert(\"Todo Edited\");\r\n        const obj = {\r\n            todo_name: this.state.todo_name,\r\n            todo_description: this.state.todo_description,\r\n            todo_completed: this.state.todo_completed\r\n        };\r\n        axios.post(\"http://localhost:5000/todos/update/\" + this.props.match.params.id, obj)\r\n            //updates our todo in the backend by matching the id and using the onsubmit object\r\n            .then(res => console.log(res.data));\r\n        //this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Update Todo</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Name: </label>\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.todo_name} onChange={this.onChangeTodoName}>\r\n                        </input>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"form-group\">\r\n                            <label>Description: </label>\r\n                            <input type=\"text\" className=\"form-control\" value={this.state.todo_description} onChange={this.onChangeTodoDescription}>\r\n                            </input>\r\n                        </div>\r\n                        <div className=\"form-check\">\r\n                            <input type=\"checkbox\" className=\"form-check-input\" id=\"completedCheckbox\"\r\n                                name=\"completedCheckBox\" onChange={this.onChangeTodoCompleted} checked={this.state.todo_completed}\r\n                                value={this.state.todo_completed}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"completedCheckbox\">\r\n                                Completed\r\n                        </label>\r\n                        </div>\r\n                        <br />\r\n                        <div className=\"form-group\">\r\n                            <input type=\"submit\" value=\"Update Todo\" className=\"btn btn-primary\" />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst Todo = props => (\r\n    <tr>\r\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_name}</td>\r\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_description}</td>\r\n        <td>\r\n            <Link to={\"/edit/\" + props.todo._id}>Edit</Link>\r\n\r\n        </td>\r\n        <td>\r\n\r\n            <Link to={\"/delete/\" + props.todo._id}> Delete</Link>\r\n        </td>\r\n    </tr>\r\n)\r\n\r\nexport default class TodosList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { todos: [] };\r\n\r\n\r\n        this.refreshPage = this.refreshPage.bind(this)\r\n\r\n    }\r\n\r\n\r\n    refreshPage() {\r\n        axios.get('http://localhost:5000/todos/')\r\n            .then(response => {\r\n                this.setState({ todos: response.data });\r\n\r\n            })\r\n            .catch(function (error) {\r\n                console.log(\"Testing for an error:\", error);\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshPage();\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    //when the component is updated through the edit-to, the page will render automatically\r\n\r\n    // componentDidUpdate() {\r\n    //     axios.get('http://localhost:5000/todos/')\r\n    //         .then(response => {\r\n    //             if (this._isMounted) {\r\n    //                 this.setState({ todos: response.data });\r\n    //             }\r\n    //             this.refreshPage();\r\n\r\n    //         })\r\n    //         .catch(function (error) {\r\n    //             console.log(error);\r\n    //         })\r\n    // }\r\n    todoList() {\r\n        return this.state.todos.map(function (currentTodo, i) {\r\n            return <Todo todo={currentTodo} key={i} />;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <h3>Todos List</h3>\r\n                <table className=\"table table-striped\" style={{ marginTop: 20 }}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Todo Name</th>\r\n                            <th>Description</th>\r\n                            <th>Completed</th>\r\n                            <th>Delete </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.todoList()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\nexport default class deleteTodo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.state = {\r\n            //grabs the state\r\n            todo_name: '',\r\n            todo_description: '',\r\n\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        axios.get('http://localhost:5000/todos/' + this.props.match.params.id)\r\n            //get request to the backend \"server\" for the todolist\r\n            .then(response => {\r\n                this.setState({\r\n                    //sets the state with the original properties\r\n                    todo_name: response.data.todo_name,\r\n                    todo_description: response.data.todo_description,\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        alert(\"Todo Deleted\");\r\n        e.preventDefault();\r\n        const obj = {\r\n            todo_name: this.state.todo_name,\r\n            todo_description: this.state.todo_description,\r\n        };\r\n        axios.delete(\"http://localhost:5000/todos/delete/\" + this.props.match.params.id, obj)\r\n            //deletes our todo in the backend by matching the id and using the onsubmit object\r\n            .then(res => console.log(res.data));\r\n            this.setState({\r\n                //here we reset the state after submitting\r\n                todo_name: '',\r\n                todo_description: '',\r\n        //this.props.history.push('/');\r\n    }\r\n)}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Update Todo</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Name: </label>\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.todo_name} onChange={this.onChangeTodoName}>\r\n                        </input>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"form-group\">\r\n                            <label>Description: </label>\r\n                            <input type=\"text\" className=\"form-control\" value={this.state.todo_description} onChange={this.onChangeTodoDescription}>\r\n                            </input>\r\n                        </div>\r\n                        <br />\r\n                        <div className=\"form-group\">\r\n\r\n                            <input type=\"submit\" value=\"Delete Todo\" className=\"btn btn-primary\" />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport CreateTodo from \"./components/create-todo\";\nimport EditTodo from \"./components/edit-todo\";\nimport TodosList from \"./components/todos-list\";\nimport deleteTodo from \"./components/delete-todo\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n\n        <div className=\"container-fluid\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link to=\"/\" className=\"navbar-brand\"></Link>\n            <div className=\"collpase nav-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">Todos</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/create\" className=\"nav-link\">Create Todo</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <Route path=\"/\" exact component={TodosList} />\n          <Route path=\"/edit/:id\" component={EditTodo} />\n          <Route path=\"/create\" component={CreateTodo} />\n          <Route path=\"/delete/:id\" component={deleteTodo} />\n        </div>\n      </Router >\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}